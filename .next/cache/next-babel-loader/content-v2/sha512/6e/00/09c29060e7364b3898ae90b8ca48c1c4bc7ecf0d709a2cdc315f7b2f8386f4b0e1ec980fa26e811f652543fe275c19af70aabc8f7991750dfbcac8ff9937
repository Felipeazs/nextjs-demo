{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/felipezapatasoto/Academind/ReactJs/next.js/06-onwards-to-a-bigger-project-starting-project/pages/[meetup-id]/index.jsx\";\nimport React from 'react';\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetails = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://files2.soniccdn.com/files/2022/01/13/Private%20Stock%20Orianthi%20Limited%20Edition%202.jpeg\",\n    title: \"A first meetup\",\n    address: \"Santiago de Chile, 1234\",\n    description: \"Description of the meetup\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  //Pre-generate must popular routes (ex. articles in blogs)\n  const client = await MongoClient.connect('mongodb+srv://felipez:v6Lk7hpriRdaU4@academind.kpncuhg.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    //true if every page needs to be pre-generated dynamically\n    paths: meetups.map(meetup => ({\n      params: {\n        ['meetup-id']: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  // get url params outside the component\n  const meetupId = context.params['meetup-id'];\n  const client = await MongoClient.connect('mongodb+srv://felipez:v6Lk7hpriRdaU4@academind.kpncuhg.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/felipezapatasoto/Academind/ReactJs/next.js/06-onwards-to-a-bigger-project-starting-project/pages/[meetup-id]/index.jsx"],"names":["React","MongoClient","MeetupDetail","MeetupDetails","props","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","toString","getStaticProps","context","meetupId","selectedMeetup","findOne","meetupData"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,WAAT,QAA4B,SAA5B;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,sGADR;AAEE,IAAA,KAAK,EAAC,gBAFR;AAGE,IAAA,OAAO,EAAC,yBAHV;AAIE,IAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD;;AAWA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC;AAEA,QAAMC,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CACnB,wGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AACY;AACjBC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAE,SAAC,WAAD,GAAeD,MAAM,CAACN,GAAP,CAAWQ,QAAX;AAAjB;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD,CApBM;AAsBP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAACH,MAAR,CAAe,WAAf,CAAjB;AAEA,QAAMd,MAAM,GAAG,MAAML,WAAW,CAACM,OAAZ,CACnB,wGADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEW;AAAP,GAA1B,CAA7B;AAEAlB,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLX,IAAAA,KAAK,EAAE;AACLuB,MAAAA,UAAU,EAAEF;AADP;AADF,GAAP;AAKD,CApBM;AAsBP,eAAetB,aAAf","sourcesContent":["import React from 'react'\n\nimport { MongoClient } from 'mongodb'\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail'\n\nconst MeetupDetails = (props) => {\n  return (\n    <MeetupDetail\n      image=\"https://files2.soniccdn.com/files/2022/01/13/Private%20Stock%20Orianthi%20Limited%20Edition%202.jpeg\"\n      title=\"A first meetup\"\n      address=\"Santiago de Chile, 1234\"\n      description=\"Description of the meetup\"\n    />\n  )\n}\n\nexport const getStaticPaths = async () => {\n  //Pre-generate must popular routes (ex. articles in blogs)\n\n  const client = await MongoClient.connect(\n    'mongodb+srv://felipez:v6Lk7hpriRdaU4@academind.kpncuhg.mongodb.net/meetups?retryWrites=true&w=majority',\n  )\n  const db = client.db()\n\n  const meetupsCollection = db.collection('meetups')\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray()\n\n  client.close()\n\n  return {\n    fallback: false, //true if every page needs to be pre-generated dynamically\n    paths: meetups.map((meetup) => ({\n      params: { ['meetup-id']: meetup._id.toString() },\n    })),\n  }\n}\n\nexport const getStaticProps = async (context) => {\n  // get url params outside the component\n  const meetupId = context.params['meetup-id']\n\n  const client = await MongoClient.connect(\n    'mongodb+srv://felipez:v6Lk7hpriRdaU4@academind.kpncuhg.mongodb.net/meetups?retryWrites=true&w=majority',\n  )\n  const db = client.db()\n\n  const meetupsCollection = db.collection('meetups')\n\n  const selectedMeetup = await meetupsCollection.findOne({ _id: meetupId })\n\n  client.close()\n\n  return {\n    props: {\n      meetupData: selectedMeetup,\n    },\n  }\n}\n\nexport default MeetupDetails\n"]},"metadata":{},"sourceType":"module"}